 - Что такое синхронизация?
Синхронизация - это процесс координации выполнения нескольких потоков или процессов для обеспечения правильного доступа к общим ресурсам и предотвращения гонок данных (race conditions). Синхронизация необходима для корректного параллельного выполнения программ, где различные потоки могут одновременно взаимодействовать с общими данными.

 - Что называется критической секцией программы?
Критическая секция программы - это участок кода, который должен выполняться атомарно, то есть без прерываний другими потоками, чтобы предотвратить одновременный доступ к общим ресурсам или данным. Это обеспечивает корректность данных и предотвращает состояние гонок.

 - Назовите три условия, при которых параллельно выполняющиеся потоки будут правильно взаимодействовать.
Взаимное исключение (Mutual Exclusion): Только один поток может входить в критическую секцию в любой момент времени.
Отсутствие взаимоблокировок (Deadlock-free): Потоки не должны застревать, ожидая друг друга.
Отсутствие голодания (Starvation-free): Каждый поток должен иметь возможность завершить выполнение критической секции в конечный срок.

 - Как классифицируются механизмы синхронизации.
Механизмы синхронизации классифицируются на:
Высокоуровневые механизмы: мьютексы, семафоры, критические секции.
Низкоуровневые механизмы: атомарные операции, такие как Interlocked функции.
Спин-блокировки и блокировки на основе ожидания (wait-based): спинлоки, событийные объекты.

 - Назовите механизмы синхронизации потоков одного процесса.
Критические секции (Critical Sections)
Мьютексы (Mutexes)
Семафоры (Semaphores)
События (Events)
Спин-блокировки (Spin-locks)
Атомарные операции (Interlocked Functions)

 - Что такое Interlocked-функция?
Interlocked-функция - это низкоуровневая функция, обеспечивающая атомарное выполнение операций над переменными, такими как инкремент, декремент, сравнение и замена. Эти функции используются для синхронизации доступа к переменным между потоками без использования сложных механизмов блокировки.

 - Как работает функция InterlockedCompareExchange?
Функция InterlockedCompareExchange выполняет атомарное сравнение и замену значения. Она сравнивает значение по указателю с указанным значением. Если они равны, то заменяет значение по указателю на новое значение, иначе ничего не меняет. Возвращает исходное значение по указателю.

 - Что называется блокирующей переменной?
Блокирующая переменная - это переменная, используемая для управления доступом к критической секции, сигнализируя о том, что ресурс занят. Примеры включают мьютексы и семафоры.

 - Как работает блокирующая переменная?
Блокирующая переменная работает путем изменения своего состояния (заблокирована или разблокирована) при входе и выходе из критической секции. Поток должен "захватить" переменную перед входом в критическую секцию и "освободить" после выхода, что предотвращает другие потоки от входа в секцию до освобождения переменной.

 - Что называется спин-блокировкой? В чем ее недостаток?
Спин-блокировка (spin-lock) - это механизм синхронизации, при котором поток постоянно проверяет значение блокирующей переменной, ожидая ее освобождения. Недостаток в том, что поток активно использует процессорное время, что может привести к значительным потерям производительности, особенно при длительных ожиданиях.

 - Перечислите порядок применения функций для управления критическими секциями ОС.
InitializeCriticalSection: инициализация критической секции.
EnterCriticalSection: вход в критическую секцию.
LeaveCriticalSection: выход из критической секции.
DeleteCriticalSection: удаление критической секции.

 - Как работает функция EnterCriticalSection?
Функция EnterCriticalSection блокирует поток до тех пор, пока он не сможет войти в критическую секцию. Если критическая секция свободна, поток входит в нее и продолжает выполнение. Если занята, поток ждет.

 - Как работает функция TryEnterCriticalSection?
Функция TryEnterCriticalSection пытается войти в критическую секцию без блокировки потока. Если критическая секция свободна, поток входит и функция возвращает TRUE. Если занята, функция немедленно возвращает FALSE, и поток продолжает выполнение без ожидания.