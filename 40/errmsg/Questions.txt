1. Какие значения могут возвращать системные функции?
Системные функции Windows могут возвращать различные значения в зависимости от типа функции. Вот некоторые из возможных значений:

Коды завершения (Return codes): Могут быть значения успеха или ошибки.
Например, большинство API функций Windows возвращают 0 при успехе и ненулевое значение при ошибке.
Дескрипторы (Handles): Указатели на объекты, используемые в Windows (например, дескрипторы файлов, процессов, потоков).
Числовые значения: Например, функции могут возвращать количество байтов, прочитанных или записанных.
Строки: Некоторые функции возвращают строки или массивы символов.


2. Опишите структуру кода ошибки.
Коды ошибок в Windows обычно представляют собой числовые значения (типа DWORD), которые можно разделить на следующие компоненты:

Фасет (Facility): Определяет компонент системы, который генерировал ошибку.
Серьезность (Severity): Определяет серьезность ошибки, где 0 означает успех, а 1 – ошибка.
Код ошибки (Error Code): Уникальный код, описывающий конкретную ошибку.
Коды ошибок часто представлены в виде 32-битных значений, разделенных на


3. Как установить или прочитать код последней ошибки?
Для установки кода последней ошибки используется функция SetLastError:
    SetLastError(DWORD dwErrCode);
Для чтения кода последней ошибки используется функция GetLastError:
    DWORD error = GetLastError();


4. Где содержится описание ошибки?
Описание ошибки можно получить с помощью функции FormatMessage, которая форматирует сообщения об ошибках,
используя системные сообщения. 

5. Какие параметры могут быть заданы для функции MessageBox?
Функция MessageBox принимает следующие параметры:

    int MessageBox(
        HWND hWnd,           // Дескриптор окна
        LPCTSTR lpText,      // Текст сообщения
        LPCTSTR lpCaption,   // Заголовок окна
        UINT uType           // Тип сообщения и кнопок
    );
Параметр uType определяет иконку, кнопки и дополнительные опции сообщения:

Кнопки: MB_OK, MB_OKCANCEL, MB_YESNO, MB_YESNOCANCEL и т.д.
Иконки: MB_ICONINFORMATION, MB_ICONWARNING, MB_ICONERROR, MB_ICONQUESTION.
Модальность: MB_APPLMODAL, MB_SYSTEMMODAL, MB_TASKMODAL.
Дополнительные параметры: MB_DEFBUTTON1, MB_DEFBUTTON2 и т.д.

6. Как задаются сообщения об ошибках с параметрами?
Сообщения с параметрами задаются с использованием функции FormatMessage с флагом FORMAT_MESSAGE_ARGUMENT_ARRAY


7. Как форматируются сообщения с параметрами?
Сообщения форматируются с использованием функции FormatMessage. Пример форматирования с параметрами приведен выше.


8. Как форматируются сообщения из буфера пользователя?
Сообщения из буфера пользователя форматируются с использованием флага FORMAT_MESSAGE_FROM_STRING в функции FormatMessage. 


9. Сформируйте сообщение «This diskette is а disk», используя два подставляемых параметра diskette и дополнительные параметры.
Пример кода, который формирует указанное сообщение с использованием двух параметров:
    DWORD_PTR params[] = {
        (DWORD_PTR)"diskette",
        (DWORD_PTR)"disk"
    };
    char* message = NULL;
    FormatMessage(
        FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_STRING | FORMAT_MESSAGE_ARGUMENT_ARRAY,
        "This %1 is a %2",
        0,
        0,
        (LPSTR)&message,
        0,
        (va_list*)params
    );
    if (message) {
        MessageBox(NULL, message, "Formatted Message", MB_OK | MB_ICONINFORMATION);
        LocalFree(message);
    }
